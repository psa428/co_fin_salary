{"ast":null,"code":"var _jsxFileName = \"/home/psa/develop/result-school/blog/src/pages/post/components/comments/comments.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Icon } from \"../../../../components\";\nimport { Comment } from './components';\nimport { useServerRequest } from '../../../../hooks';\nimport styled from \"styled-components\";\nimport { selectUserId } from \"../../../../selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsContainer = ({\n  className,\n  comments,\n  postId\n}) => {\n  _s();\n  const [newComment, setNewComment] = useState('');\n  const userId = useSelector(selectUserId);\n  const dispatch = useDispatch();\n  const requestServer = useServerRequest();\n  const onNewCommentAdd = (userId, postId, content) => {\n    dispatch(addCommentAsync(requestServer, userId, postId, content));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      \"new-comment\": true,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"comment\",\n        value: newComment,\n        placeholder: \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439...\",\n        onChange: target => setNewComment(target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        id: \"fa-paper-plane-o\",\n        margin: \"0 7px 0 0\",\n        size: \"18px\",\n        onClick: () => onNewCommentAdd(userId, postId, newComment)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: comments.map(({\n          id,\n          author,\n          content,\n          publishedAt\n        }) => /*#__PURE__*/_jsxDEV(Comment, {\n          id: id,\n          author: author,\n          content: content,\n          publishedAt: publishedAt\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsContainer, \"nicbQOGBJYNeVcPY8LOfcAbOx30=\", false, function () {\n  return [useSelector, useDispatch, useServerRequest];\n});\n_c = CommentsContainer;\nexport const Comments = styled(CommentsContainer)`\n    display:    flex;\n    width:  580px;\n    margin: 0 auto;\n\n    & .new-comment  {\n        display:    flex;\n        width:  100%;\n        margin: 20px 0 10px;\n    }\n\n    & .new-comment textarea {\n        width:  100%;\n        height: 120px;\n        resize: none;\n    }\n`;\nvar _c;\n$RefreshReg$(_c, \"CommentsContainer\");","map":{"version":3,"names":["useState","useDispatch","useSelector","Icon","Comment","useServerRequest","styled","selectUserId","jsxDEV","_jsxDEV","CommentsContainer","className","comments","postId","_s","newComment","setNewComment","userId","dispatch","requestServer","onNewCommentAdd","content","addCommentAsync","children","name","value","placeholder","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","id","margin","size","onClick","map","author","publishedAt","_c","Comments","$RefreshReg$"],"sources":["/home/psa/develop/result-school/blog/src/pages/post/components/comments/comments.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Icon } from \"../../../../components\";\nimport { Comment } from './components';\nimport { useServerRequest } from '../../../../hooks';\nimport styled from \"styled-components\";\nimport { selectUserId } from \"../../../../selectors\";\n\nconst CommentsContainer = ({ className, comments, postId }) => {\n    const [newComment, setNewComment] = useState('');\n    const userId = useSelector(selectUserId);\n    const dispatch =  useDispatch();\n    const requestServer = useServerRequest();\n\n    const onNewCommentAdd = (userId, postId, content) => {\n        dispatch(addCommentAsync(requestServer, userId, postId, content))\n    \n};\n\n    return (\n        <div className={className}>\n            <div className=\"\"new-comment>\n            <textarea name=\"comment\" value={newComment} placeholder=\"Комментарий...\" \n                onChange={( target) => setNewComment(target.value)}\n            ></textarea>\n            <Icon\n                id=\"fa-paper-plane-o\"\n                margin=\"0 7px 0 0\"\n                size=\"18px\"\n                onClick={() => onNewCommentAdd(userId, postId, newComment)}\n            />    \n                <div className=\"comments\">\n                    {comments.map(({ id, author, content, publishedAt }) => (\n                        <Comment \n                            key={id}\n                            id={id}\n                            author={author}\n                            content={content}\n                            publishedAt={publishedAt}\n                        />\n                    \n                ))}\n                </div>\n            </div>    \n        </div>\n    )    \n};\n\n\nexport const Comments = styled(CommentsContainer)`\n    display:    flex;\n    width:  580px;\n    margin: 0 auto;\n\n    & .new-comment  {\n        display:    flex;\n        width:  100%;\n        margin: 20px 0 10px;\n    }\n\n    & .new-comment textarea {\n        width:  100%;\n        height: 120px;\n        resize: none;\n    }\n`;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,YAAY,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMiB,MAAM,GAAGf,WAAW,CAACK,YAAY,CAAC;EACxC,MAAMW,QAAQ,GAAIjB,WAAW,CAAC,CAAC;EAC/B,MAAMkB,aAAa,GAAGd,gBAAgB,CAAC,CAAC;EAExC,MAAMe,eAAe,GAAGA,CAACH,MAAM,EAAEJ,MAAM,EAAEQ,OAAO,KAAK;IACjDH,QAAQ,CAACI,eAAe,CAACH,aAAa,EAAEF,MAAM,EAAEJ,MAAM,EAAEQ,OAAO,CAAC,CAAC;EAEzE,CAAC;EAEG,oBACIZ,OAAA;IAAKE,SAAS,EAAEA,SAAU;IAAAY,QAAA,eACtBd,OAAA;MAAKE,SAAS,EAAC,EAAE;MAAA,mBAAW;MAAAY,QAAA,gBAC5Bd,OAAA;QAAUe,IAAI,EAAC,SAAS;QAACC,KAAK,EAAEV,UAAW;QAACW,WAAW,EAAC,uEAAgB;QACpEC,QAAQ,EAAIC,MAAM,IAAKZ,aAAa,CAACY,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACZvB,OAAA,CAACN,IAAI;QACD8B,EAAE,EAAC,kBAAkB;QACrBC,MAAM,EAAC,WAAW;QAClBC,IAAI,EAAC,MAAM;QACXC,OAAO,EAAEA,CAAA,KAAMhB,eAAe,CAACH,MAAM,EAAEJ,MAAM,EAAEE,UAAU;MAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC,eACEvB,OAAA;QAAKE,SAAS,EAAC,UAAU;QAAAY,QAAA,EACpBX,QAAQ,CAACyB,GAAG,CAAC,CAAC;UAAEJ,EAAE;UAAEK,MAAM;UAAEjB,OAAO;UAAEkB;QAAY,CAAC,kBAC/C9B,OAAA,CAACL,OAAO;UAEJ6B,EAAE,EAAEA,EAAG;UACPK,MAAM,EAAEA,MAAO;UACfjB,OAAO,EAAEA,OAAQ;UACjBkB,WAAW,EAAEA;QAAY,GAJpBN,EAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CAER;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAClB,EAAA,CAtCIJ,iBAAiB;EAAA,QAEJR,WAAW,EACRD,WAAW,EACPI,gBAAgB;AAAA;AAAAmC,EAAA,GAJpC9B,iBAAiB;AAyCvB,OAAO,MAAM+B,QAAQ,GAAGnC,MAAM,CAACI,iBAAiB,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,IAAA8B,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}